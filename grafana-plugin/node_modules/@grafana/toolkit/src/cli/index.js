"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = void 0;
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const commander_1 = require("commander");
const plugin_utils_1 = require("./tasks/plugin.utils");
const template_1 = require("./tasks/template");
const execTask_1 = require("./utils/execTask");
const run = (includeInternalScripts = false) => {
    if (includeInternalScripts) {
        commander_1.program.option('-d, --depreciate <scripts>', 'Inform about npm script deprecation', (v) => v.split(','));
        commander_1.program
            .command('debug:template')
            .description('Just testing')
            .action(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield (0, execTask_1.execTask)(template_1.templateTask)({});
        }));
    }
    commander_1.program.option('-v, --version', 'Toolkit version').action(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const version = (0, plugin_utils_1.getToolkitVersion)();
        console.log(`v${version}`);
    }));
    commander_1.program
        .command('plugin:create [name]')
        .description('[removed] Use grafana create-plugin instead')
        .action(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        console.log('No longer supported. Use grafana create-plugin https://github.com/grafana/plugin-tools/tree/main/packages/create-plugin\n');
        process.exit(1);
    }));
    commander_1.program
        .command('plugin:build')
        .option('--maxJestWorkers <num>|<string>', 'Limit number of Jest workers spawned')
        .option('--coverage', 'Run code coverage', false)
        .option('--skipTest', 'Skip running tests (for pipelines that run it separate)', false)
        .option('--skipLint', 'Skip running lint (for pipelines that run it separate)', false)
        .option('--preserveConsole', 'Preserves console calls', false)
        .description('[removed] Use grafana create-plugin instead')
        .action(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        console.log('No longer supported. Use grafana create-plugin https://github.com/grafana/plugin-tools/tree/main/packages/create-plugin\n');
        process.exit(1);
    }));
    commander_1.program
        .command('plugin:sign')
        .option('--signatureType <type>', 'Signature Type')
        .option('--rootUrls <urls...>', 'Root URLs', function (url, urls) {
        if (typeof url !== 'string') {
            return urls;
        }
        const parts = url.split(',');
        urls.push(...parts);
        return urls;
    }, [])
        .description('[removed] Use grafana sign-plugin instead')
        .action(() => {
        console.log('No longer supported. Use grafana sign-plugin https://github.com/grafana/plugin-tools/tree/main/packages/sign-plugin\n');
        process.exit(1);
    });
    commander_1.program.on('command:*', () => {
        console.error('Invalid command: %s\nSee --help for a list of available commands.', commander_1.program.args.join(' '));
        process.exit(1);
    });
    commander_1.program.parse(process.argv);
    const options = commander_1.program.opts();
    if (options.depreciate && options.depreciate.length === 2) {
        console.log(chalk_1.default.yellow.bold(`[NPM script depreciation] ${options.depreciate[0]} is deprecated! Use ${options.depreciate[1]} instead!`));
    }
};
exports.run = run;
//# sourceMappingURL=index.js.map